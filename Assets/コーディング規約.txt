コーディング規約 YamashitaShota


・関数は「動詞　名詞」で記述
※英記述に準ずる
例)int getLife()

・一時変数は必ず頭に 「_」をつける
※一時変数をわかりやすくするため
例)_texture

・実装後変わる可能性の高い数値やクラスなどの引数には「serializefield」を用いること
※Unity上で変更可能なため
例)[serializefield] int m_life ;

・プログラムファイルの一番上に、だれが書いたか、何に用いるものなのかを簡単に記述
※だれが作ったものかをソース上で確認できるようにするため
例)
// YamashitaShota
//　プレイヤー操作

・当たり判定のグループは新しく作る際にメインプログラマに報告
※環境設定に保存されるためGitに挙げると競合が起こりやすく解決しにくいため
例)なし

・当たり判定のトリガーを使う際「Stay」を極力用いないこと
※毎フレームグループの設定にあるものを総当たりするため処理ネックになるため
例)なし

・メンバ変数は「m」を頭文字につけること
※メンバ変数を見分けやすくするため
例)m_pos

・機能を増やす際は変数を新しく作ること
※Update関数をかたずけデバックをスムーズにするため
例)なし

・変数は小文字を用いて使用すること。複数単語を用いる際は2文字目以降は頭文字を大文字とする
※単語の節目が分かりにくく可読性低下を防ぐため
例)m_flontVec

・すべて大文字の名前は定数のみとする
※可読性向上のため

・デバッグログはプッシュする前にコメントアウト、もしくは消すこと
※デバッグログが流されるのを防止するため
